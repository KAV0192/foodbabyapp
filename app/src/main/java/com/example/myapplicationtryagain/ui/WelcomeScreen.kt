package com.example.myapplicationtryagain.ui

import AddGrowthRecordDialog
import androidx.compose.foundation.*
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.foundation.lazy.items
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Add
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import com.example.myapplicationtryagain.data.GrowthDataStore
import com.example.myapplicationtryagain.vidgets.GrowthChart
import com.example.myapplicationtryagain.data.ProfileDataStore
import com.example.myapplicationtryagain.data.VaccineDataStore
import com.example.myapplicationtryagain.data.VaccineCategory
import com.example.myapplicationtryagain.data.VaccineItem
import kotlinx.coroutines.launch
import kotlinx.datetime.Clock
import kotlinx.datetime.LocalDate
import kotlinx.datetime.TimeZone
import kotlinx.datetime.toLocalDateTime

@Composable
fun WelcomeScreen(navController: NavController) {
    // --- STATE ---
    val articles = listOf(
        ArticleCardUi("5 –ø–µ—Ä–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤", "–ß—Ç–æ –≤–≤–µ—Å—Ç–∏ –Ω–∞ –ø—Ä–∏–∫–æ—Ä–º? –ö—Ä–∞—Ç–∫–∏–π –≥–∏–¥ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π."),
        ArticleCardUi("–†–µ–∂–∏–º –ø–∏—Ç–∞–Ω–∏—è?", "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è –∏ –±–∏–æ–ª–æ–≥–∏—è –ø–µ—Ä–≤–æ–≥–æ –≥–æ–¥–∞ –∂–∏–∑–Ω–∏."),
        ArticleCardUi("–†–µ—Ü–µ–ø—Ç –Ω–µ–¥–µ–ª–∏", "–ü—é—Ä–µ –∏–∑ –∫–∞–±–∞—á–∫–∞: –∫–∞–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å?"),
        ArticleCardUi("–ó–∞–≥–ª—É—à–∫–∞ –æ–∫–Ω–∞ ‚Ññ4", "")
    )

    val foodReminders = emptyList<String>()

    val context = LocalContext.current
    val growthRecords by GrowthDataStore.getRecords(context).collectAsState(initial = emptyList())
    val childProfile by ProfileDataStore.getProfileFlow(context).collectAsState(initial = null)

    val childName = childProfile?.name ?: "–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
    val childAge = calcAge(childProfile?.birthDate)

    // --- –ü—Ä–∏–≤–∏–≤–∫–∏: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É ---
    val categories by VaccineDataStore.getCategories(context).collectAsState(initial = emptyList())
    val ageInMonths = remember(childProfile) { calcAgeInMonths(childProfile?.birthDate) }
    val currentCategory = remember(categories, ageInMonths) {
        findVaccineCategoryByAge(categories, ageInMonths)
    }
    val vaccinesThisMonth = currentCategory?.items?.filter { it.date.isNullOrEmpty() } ?: emptyList()

    var showAddDialog by remember { mutableStateOf(false) }
    val scope = rememberCoroutineScope()

    // --- UI ---
    Column(
        Modifier
            .fillMaxSize()
            .verticalScroll(rememberScrollState())
            .background(Color(0xFFF7F9FA))
    ) {
        // --- –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª —Å–æ —Å—Ç–∞—Ç—å—è–º–∏ ---
        LazyRow(
            modifier = Modifier
                .fillMaxWidth()
                .padding(top = 18.dp, start = 8.dp, end = 8.dp),
            horizontalArrangement = Arrangement.spacedBy(10.dp)
        ) {
            items(articles) { article ->
                ArticleCardSmall(article)
            }
        }

        // --- –ê–≤–∞—Ç–∞—Ä–∫–∞ –∏ –∏–º—è ---
        Column(
            Modifier
                .fillMaxWidth()
                .padding(top = 20.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Box(
                Modifier
                    .size(90.dp)
                    .clip(CircleShape)
                    .background(Color(0xFFDDE6EF)),
                contentAlignment = Alignment.Center
            ) {
                Text("üë∂", fontSize = 48.sp, color = Color(0xFF90A4AE))
            }
            Spacer(Modifier.height(10.dp))
            Text(childName, fontWeight = FontWeight.Medium, fontSize = 19.sp)
            Text(childAge, color = Color(0xFF1976D2), fontSize = 15.sp)
        }

        // --- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–∏–≤–∏–≤–∫–∞–º ---
        Card(
            modifier = Modifier
                .fillMaxWidth()
                .padding(horizontal = 14.dp, vertical = 14.dp),
            shape = RoundedCornerShape(11.dp),
            colors = CardDefaults.cardColors(Color(0xFFFFFBEA)),
            elevation = CardDefaults.cardElevation(2.dp)
        ) {
            Column(Modifier.padding(13.dp)) {
                Text(
                    "–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –ø–æ –ø–ª–∞–Ω—É:",
                    color = Color(0xFFFBC02D),
                    fontWeight = FontWeight.SemiBold,
                    fontSize = 16.sp,
                )
                Spacer(Modifier.height(6.dp))
                if (vaccinesThisMonth.isEmpty()) {
                    Text(
                        "–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–≤–∏–≤–æ–∫",
                        fontSize = 15.sp,
                        color = Color(0xFF72560A),
                        modifier = Modifier.padding(start = 8.dp, bottom = 2.dp)
                    )
                } else {
                    vaccinesThisMonth.forEach {
                        Text(
                            "‚Ä¢ ${it.name}",
                            fontSize = 15.sp,
                            color = Color(0xFF72560A),
                            modifier = Modifier.padding(start = 8.dp, bottom = 2.dp)
                        )
                    }
                }
            }
        }

        // --- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∏—ë–º–∞—Ö –ø–∏—â–∏ ---
        Card(
            modifier = Modifier
                .fillMaxWidth()
                .padding(horizontal = 14.dp, vertical = 0.dp),
            shape = RoundedCornerShape(10.dp),
            colors = CardDefaults.cardColors(Color(0xFFE3F2FD)),
            elevation = CardDefaults.cardElevation(2.dp)
        ) {
            Column(Modifier.padding(13.dp)) {
                Text(
                    "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:",
                    color = Color(0xFF1976D2),
                    fontWeight = FontWeight.SemiBold,
                    fontSize = 15.sp
                )
                Spacer(Modifier.height(4.dp))
                if (foodReminders.isEmpty()) {
                    Text("–ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ—Ç", color = Color(0xFF90A4AE), fontSize = 15.sp)
                } else {
                    foodReminders.forEach {
                        Text(
                            "‚Ä¢ $it",
                            fontSize = 15.sp,
                            color = Color(0xFF263238),
                            modifier = Modifier.padding(start = 8.dp, bottom = 2.dp)
                        )
                    }
                }
            }
        }

        // --- –í–ò–î–ñ–ï–¢ –ì–†–ê–§–ò–ö–ê + –∫–Ω–æ–ø–∫–∞ ---
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(horizontal = 14.dp, vertical = 12.dp)
                .background(
                    color = Color(0xFFEAF3FB),
                    shape = RoundedCornerShape(12.dp)
                ),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Text(
                "–î–∏–Ω–∞–º–∏–∫–∞ —Ä–æ—Å—Ç–∞ –∏ –≤–µ—Å–∞",
                style = MaterialTheme.typography.bodyMedium,
                color = Color(0xFF1976D2),
                fontWeight = FontWeight.Medium,
                fontSize = 16.sp,
                modifier = Modifier.weight(1f)
            )
            IconButton(
                onClick = { showAddDialog = true },
                modifier = Modifier
                    .size(34.dp)
                    .padding(end = 4.dp)
            ) {
                Icon(
                    imageVector = Icons.Default.Add,
                    contentDescription = "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å",
                    tint = Color(0xFF1976D2),
                    modifier = Modifier.size(22.dp)
                )
            }
        }
        GrowthChart(
            records = growthRecords,
            chartType = "–†–æ—Å—Ç –∏ –≤–µ—Å",
            modifier = Modifier
                .fillMaxWidth()
                .height(140.dp)
        )




        // --- –î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ ---
        if (showAddDialog) {
            AddGrowthRecordDialog(
                onDismiss = { showAddDialog = false },
                onSave = { newRecord ->
                    val updated = growthRecords + newRecord
                    scope.launch {
                        GrowthDataStore.saveRecords(context, updated)
                    }
                    showAddDialog = false
                }
            )
        }

        Spacer(Modifier.height(16.dp))
    }
}

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ ---

data class ArticleCardUi(val title: String, val desc: String)

@Composable
fun ArticleCardSmall(article: ArticleCardUi) {
    Card(
        modifier = Modifier
            .width(108.dp)
            .height(62.dp),
        shape = RoundedCornerShape(13.dp),
        colors = CardDefaults.cardColors(Color(0xFFEEF6FA)),
        elevation = CardDefaults.cardElevation(8.dp),
    ) {
        Box(
            modifier = Modifier.fillMaxSize(),
            contentAlignment = Alignment.Center
        ) {
            Text(
                text = article.title,
                fontWeight = FontWeight.SemiBold,
                fontSize = 13.sp,
                color = Color(0xFF1976D2),
                textAlign = TextAlign.Center,
                maxLines = 2,
                modifier = Modifier.padding(horizontal = 7.dp)
            )
        }
    }
}

// --- –í–´–ß–ò–°–õ–Ø–ï–ú –≤–æ–∑—Ä–∞—Å—Ç –≤ –º–µ—Å—è—Ü–∞—Ö ---
fun calcAgeInMonths(birth: String?): Int {
    if (birth == null) return 0
    return try {
        val birthDate = LocalDate.parse(birth)
        val now = Clock.System.now().toLocalDateTime(TimeZone.currentSystemDefault()).date
        val years = now.year - birthDate.year
        val months = now.monthNumber - birthDate.monthNumber
        val totalMonths = years * 12 + months
        if (now.dayOfMonth < birthDate.dayOfMonth) totalMonths - 1 else totalMonths
    } catch (_: Exception) { 0 }
}

// --- –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É ---
fun findVaccineCategoryByAge(categories: List<VaccineCategory>, ageMonths: Int): VaccineCategory? {
    val ageCategoryMap = mapOf(
        0 to "–ù–æ–≤–æ—Ä–æ–∂–¥–µ–Ω–Ω—ã–µ –≤ –ø–µ—Ä–≤—ã–µ 24 —á–∞—Å–∞ –∂–∏–∑–Ω–∏",
        0 to "–ù–æ–≤–æ—Ä–æ–∂–¥–µ–Ω–Ω—ã–µ –Ω–∞ 3 ‚Äî 7 –¥–µ–Ω—å –∂–∏–∑–Ω–∏",
        1 to "–î–µ—Ç–∏ 1 –º–µ—Å—è—Ü",
        2 to "–î–µ—Ç–∏ 2 –º–µ—Å—è—Ü–∞",
        3 to "–î–µ—Ç–∏ 3 –º–µ—Å—è—Ü–∞",
        4 to "–î–µ—Ç–∏ 4,5 –º–µ—Å—è—Ü–µ–≤",
        6 to "–î–µ—Ç–∏ 6 –º–µ—Å—è—Ü–µ–≤",
        12 to "–î–µ—Ç–∏ 12 –º–µ—Å—è—Ü–µ–≤",
        15 to "–î–µ—Ç–∏ 15 –º–µ—Å—è—Ü–µ–≤",
        18 to "–î–µ—Ç–∏ 18 –º–µ—Å—è—Ü–µ–≤",
        20 to "–î–µ—Ç–∏ 20 –º–µ—Å—è—Ü–µ–≤",
        72 to "–î–µ—Ç–∏ 6 –ª–µ—Ç",
        78 to "–î–µ—Ç–∏ 6 ‚Äî 7 –ª–µ—Ç",
        168 to "–î–µ—Ç–∏ 14 –ª–µ—Ç",
    )
    val matchedKey = ageCategoryMap.keys.filter { it <= ageMonths }.maxOrNull() ?: 0
    val catTitle = ageCategoryMap[matchedKey]
    return categories.firstOrNull { it.title == catTitle }
}

// --- –°—Ç—Ä–æ–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ –¥–ª—è UI ---
fun calcAge(birth: String?): String {
    if (birth == null) return ""
    return try {
        val birthDate = LocalDate.parse(birth)
        val now = Clock.System.now().toLocalDateTime(TimeZone.currentSystemDefault()).date
        val years = now.year - birthDate.year
        val months = now.monthNumber - birthDate.monthNumber +
                if (now.dayOfMonth < birthDate.dayOfMonth) -1 else 0
        val showYears = if (years > 0) "$years ${plural(years, "–≥–æ–¥", "–≥–æ–¥–∞", "–ª–µ—Ç")}" else ""
        val showMonths = if (months > 0) "$months –º–µ—Å" else ""
        listOf(showYears, showMonths).filter { it.isNotEmpty() }.joinToString(" ")
    } catch (_: Exception) { "" }
}

fun plural(n: Int, one: String, two: String, many: String): String =
    when {
        n % 10 == 1 && n % 100 != 11 -> one
        n % 10 in 2..4 && (n % 100 !in 12..14) -> two
        else -> many
    }
